{
  "_args": [
    [
      {
        "raw": "mensch@^0.3.3",
        "scope": null,
        "escapedName": "mensch",
        "name": "mensch",
        "rawSpec": "^0.3.3",
        "spec": ">=0.3.3 <0.4.0",
        "type": "range"
      },
      "C:\\Users\\saida\\Desktop\\EndaAgri\\Nodejs-JWT-Authentication\\node_modules\\juice"
    ]
  ],
  "_from": "mensch@^0.3.3",
  "_hasShrinkwrap": false,
  "_id": "mensch@0.3.4",
  "_location": "/mensch",
  "_nodeVersion": "12.13.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/mensch_0.3.4_1573324773083_0.973995509598977"
  },
  "_npmUser": {
    "name": "brett",
    "email": "brettstimmerman@gmail.com"
  },
  "_npmVersion": "6.12.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mensch@^0.3.3",
    "scope": null,
    "escapedName": "mensch",
    "name": "mensch",
    "rawSpec": "^0.3.3",
    "spec": ">=0.3.3 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/juice"
  ],
  "_resolved": "https://registry.npmjs.org/mensch/-/mensch-0.3.4.tgz",
  "_shasum": "770f91b46cb16ea5b204ee735768c3f0c491fecd",
  "_shrinkwrap": null,
  "_spec": "mensch@^0.3.3",
  "_where": "C:\\Users\\saida\\Desktop\\EndaAgri\\Nodejs-JWT-Authentication\\node_modules\\juice",
  "author": {
    "name": "Brett Stimmerman",
    "email": "brettstimmerman@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/brettstimmerman/mensch/issues"
  },
  "dependencies": {},
  "description": "A decent CSS parser",
  "devDependencies": {
    "jshint": "*",
    "mocha": "*"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-IAeFvcOnV9V0Yk+bFhYR07O3yNina9ANIN5MoXBKYJ/RLYPurd2d0yw14MDhpr9/momp0WofT1bPUh3hkzdi/g==",
    "shasum": "770f91b46cb16ea5b204ee735768c3f0c491fecd",
    "tarball": "https://registry.npmjs.org/mensch/-/mensch-0.3.4.tgz",
    "fileCount": 10,
    "unpackedSize": 36564,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdxwflCRA9TVsSAnZWagAAFusP/R6ajsp/e70CT/pPzCp1\nMCSaiSKvhKb1Ck7rnAWp+VE+a3crE2J/WZsju60x2/0iblZkX4wTEjEc5eJv\nO8lfKekM14d6hQhE/iGbPY8tpsFrD6trvuDf1dMrPVepr1jibpQjzXZW4XWK\n/EEujoN5zUJ+fcm5y392ocQSkNXhb9mwB3k4WNVQOSyPEpSJmX3EMxrnZKSS\n7ZhEjxhqZd7TX21arayp/VNH8/eMY1x5Xp5L/fZLNqGN6wA9NlZLaVgCBjNC\n5RNNeK4T/SC6k1fljuC1E9DU249BMNap0/C2c4//q+Oe09qPpKHqyKZPDpJE\n39Rqbh2dY0HY7mp1q/7RPLxxtBW7789KTsHzpTUZY3zQNYgHdSdxcUJWRxj/\nwxUrH85wR//yipNYnf1sj1REecAZFm9Ox0VvPLU+VYKBaxlNtpl3hqxBijZY\nS3miu4iOixDzVSrU7PvshAvbv7Z+QZb6oXzGhQ/it6qoF9MAAY0eZGzTXYfD\n1whdkyuf5zW1/nYbtUXguCWihL9GFh9E9xH0gBDaDQVTHo0M8i9vLB64PkP5\nGKm0tSvKARk8DDhbMdgynlu/bKoIYHVfU6UnTexcRH/qH2ihWVSg91yob4Vx\nNz80Mj7BuGV4klOojb6ObSURvjD519AFki070NJ0x2oHDBHEajWRZ2YhgG5d\nNADg\r\n=MpaC\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "1bd9f971261be24219c8c84beb370c0b753f51eb",
  "homepage": "https://github.com/brettstimmerman/mensch",
  "keywords": [
    "css",
    "parser",
    "parsing",
    "stylesheet"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "bago75",
      "email": "npm@bago.org"
    },
    {
      "name": "brett",
      "email": "brettstimmerman@gmail.com"
    }
  ],
  "name": "mensch",
  "optionalDependencies": {},
  "readme": "# mensch [![Build Status](https://secure.travis-ci.org/brettstimmerman/mensch.png?branch=master)](http://travis-ci.org/brettstimmerman/mensch)\n\nA decent CSS parser.\n\n# usage\n\n```sh\nnpm install mensch\n```\n\n```js\nvar mensch = require('mensch');\n\nvar ast = mensch.parse('p { color: black; }');\nvar css = mensch.stringify(ast);\n\nconsole.log(css);\n// => p { color: black; }\n```\n\n# api\n\n## parse(css, [options={}])\n\nConvert a CSS string or an array of lexical tokens into a `stringify`-able AST.\n\n- `css` {String|Array} CSS string or array of lexical tokens\n- `[options]` {Object}\n- `[options.comments=false]` {Boolean} Allow comment nodes in the AST.\n- `[options.position=false]` {Boolean} Allow line/column position in the AST.\n\nWhen `{position: true}`, AST node will have a `position` property:\n\n```js\n{\n  type: 'comment',\n  text: ' Hello World! ',\n  position: {\n    start: { line: 1, col: 1 },\n    end: { line 1, col: 18 }\n  }\n}\n```\n\n## stringify(ast, [options={}])\n\nConvert a `stringify`-able AST into a CSS string.\n\n- `ast` {Object} A `stringify`-able AST\n- `[options]` {Object}\n- `[options.comments=false]` {Boolean} Allow comments in the stringified CSS.\n- `[options.indentation='']` {String} E.g., `indentation: '  '` will indent by\n    two spaces.\n\n## lex(css)\n\nConvert a CSS string to an array of lexical tokens for use with `.parse()`.\n\n- `css` {String} CSS\n\n# non-validating\n\nMensch is a non-validating CSS parser. While it can handle the major language\nconstructs just fine, and it can recover from gaffes like mis-matched braces and\nmissing or extraneous semi-colons, mensch can't tell you when it finds\ninvalid CSS like a misspelled property name or a misplaced `@import`.\n\n# comments\n\nUnlike most CSS parsers, mensch allows comments to be represented in the AST and\nsubsequently stringified with the `{comments: true}` option.\n\n```js\nvar options = { comments: true };\n```\n\n```js\nvar ast = mensch.parse('.red { color: red; /* Natch. */ }', options);\nvar css = mensch.stringify(ast, options);\n\nconsole.log(css);\n//=> .red { color: red; /* Natch. */ }\n```\n\nHowever, comments within the context of a selector, property, etc., will be\nignored. These comments are difficult to represent in the AST.\n\n```js\nvar ast = mench.parse('.red /*1*/ { color /*2*/: /*3*/ red /*4*/; }', options);\nvar css = mesch.stringify(ast, options);\n\nconsole.log(css);\n//=> .red { color: red; }\n```\n\n# ast\n\nThe structure of mensch's AST riffs on several existing CSS parsers, but it\nmight not be 100% compatible with other CSS parsers. Here it is in a nutshell:\n\n```js\n{\n  type: 'stylesheet'\n  stylesheet: {\n    rules: [{\n      type: 'rule',\n      selectors: ['.foo'],\n      declarations: [{\n        type: 'property',\n        name: 'color',\n        value: 'black'\n      }]\n    }]\n  }\n}\n```\n\n# credits\n\nMensch is based on several existing CSS parsers, but\n[nzakas/parser-lib](https://github.com/nzakas/parser-lib) and\n[visionmedia/css](https://github.com/visionmedia/css) are notable influences.\n\n# known users\n\n[voidlabs/mosaico](https://github.com/voidlabs/mosaico) uses Mensch parser to parse custom-flavored CSS rules in email templates and make the template editable: positions, comment parsing, multiple declarations for the same property have been keys to the choice of Mensch!\n\n[Automattic/juice](https://github.com/Automattic/juice) moved to Mensch CSS parser since 3.0 release in order to fix dozen of issues with the previous parser, expecially with support for \"multiple properties declarations\" in the same ruleset and with invalid values.\n\nPlease let us know if you use Mensch in your library!\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/brettstimmerman/mensch.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "0.3.4"
}
